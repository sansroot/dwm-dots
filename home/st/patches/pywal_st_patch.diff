--- a/config.h
+++ b/config.h
@@ -94,7 +94,7 @@
 unsigned int tabspaces = 8;
 
 /* Terminal colors (16 first used in escape sequence) */
-static const char *colorname[] = {
+const char *colorname[] = {
 	/* 8 normal colors */
 	"black",
 	"red3",

--- a/st.c
+++ b/st.c
@@ -1,4 +1,5 @@
 /* See LICENSE for license details. */
+extern const char *colorname[];
 #include <ctype.h>
 #include <errno.h>
 #include <fcntl.h>
@@ -2680,3 +2681,40 @@
 	tfulldirt();
 	draw();
 }
+#define MAX_COLORS 16
+#define MAX_COLORS 16
+
+extern const char *colorname[];
+
+void load_pywal_colors(void) {
+    FILE *fp;
+    char path[128];
+    char line[16];
+    static char *color_lines[MAX_COLORS] = {0};
+    int total_lines = 0;
+
+    snprintf(path, sizeof(path), "%s/.cache/wal/colors", getenv("HOME"));
+    fp = fopen(path, "r");
+    if (!fp) {
+        fprintf(stderr, "st: failed to open pywal colors file\n");
+        return;
+    }
+
+    while (fgets(line, sizeof(line), fp) && total_lines < MAX_COLORS) {
+        line[strcspn(line, "\n")] = 0;
+        color_lines[total_lines++] = strdup(line);
+    }
+
+    fclose(fp);
+
+    for (int i = 0; i < MAX_COLORS; i++) {
+        if (color_lines[i])
+            colorname[i] = color_lines[i];
+    }
+
+    // Define fg, bg e cursor manualmente (Ã­ndices 16, 17, 18)
+	colorname[258] = strdup(color_lines[7]); // foreground
+	colorname[259] = strdup(color_lines[0]); // background
+	colorname[256] = strdup(color_lines[5]); // cursor
+
+}

--- a/x.c
+++ b/x.c
@@ -1,4 +1,5 @@
 /* See LICENSE for license details. */
+void load_pywal_colors(void);
 #include <errno.h>
 #include <math.h>
 #include <limits.h>
@@ -2039,6 +2040,7 @@
 int
 main(int argc, char *argv[])
 {
+	load_pywal_colors();
 	xw.l = xw.t = 0;
 	xw.isfixed = False;
 	xsetcursor(cursorshape);
